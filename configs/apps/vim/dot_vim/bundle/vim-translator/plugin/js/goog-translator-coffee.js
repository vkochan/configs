// Generated by CoffeeScript 1.6.3
(function() {
  "use strict";
  var LIMIT, goog, http, langpair, query, rightFill;

  http = require("http");

  query = process.argv[2];

  langpair = process.argv[3];

  goog = {};

  rightFill = function(symbol, len, str) {
    var i, symbols, _i, _ref;
    symbols = '';
    if (str.length >= len) {
      return str;
    }
    for (i = _i = 1, _ref = len - str.length; 1 <= _ref ? _i <= _ref : _i >= _ref; i = 1 <= _ref ? ++_i : --_i) {
      symbols += symbol;
    }
    return "" + str + symbols;
  };

  LIMIT = 3;

  goog.translator = {
    langpair: "en|ru",
    translate: function(query, langpair) {
      var hl, sl, tl, _outp, _ref;
      query = encodeURIComponent(query);
      _ref = langpair.split("|"), hl = _ref[0], tl = _ref[1];
      sl = hl;
      _outp = '';
      return http.get({
        host: 'translate.google.com',
        path: "/translate_a/t?client=t&text=" + query + "&hl=" + hl + "&sl=" + sl + "&tl=" + tl + "&multires=1&otf=1&ssel=0&tsel=0&sc=1",
        port: 80,
        headers: {
          'user-agent': 'Mozilla/5.0 (X11; Linux i686; rv:7.0.1) Gecko/20100101 Firefox/7.0.1'
        }
      }, function(res) {
        var body;
        body = [];
        return res.on("data", function(chunk) {
          return body.push(chunk);
        }).on("end", function() {
          var details, entity, header, misc, result, trWords, translate, translates, variant, variantIx, variants, word, _i, _len, _ref1, _results;
          result = eval(body.join(''));
          if (decodeURIComponent(query).split(' ').length === 1) {
            header = result[0], translates = result[1], misc = result[2];
            _results = [];
            for (_i = 0, _len = translates.length; _i < _len; _i++) {
              translate = translates[_i];
              _ref1 = translate.slice(0, 3), entity = _ref1[0], variants = _ref1[1], details = _ref1[2];
              console.log(entity);
              _results.push((function() {
                var _j, _len1, _ref2, _results1;
                _results1 = [];
                for (variantIx = _j = 0, _len1 = variants.length; _j < _len1; variantIx = ++_j) {
                  variant = variants[variantIx];
                  if (variantIx === LIMIT) {
                    break;
                  }
                  _ref2 = details[variantIx].slice(0, 2), word = _ref2[0], trWords = _ref2[1];
                  trWords = trWords.join(', ');
                  _results1.push(console.log(" -  " + (rightFill(' ', 25, word + ":")) + trWords));
                }
                return _results1;
              })());
            }
            return _results;
          } else {
            header = result[0];
            return console.log(header[0][0]);
          }
        });
      }).on('error', function(e) {
        return console.log("Error " + e);
      });
    }
  };

  goog.translator.translate(query, langpair);

}).call(this);
