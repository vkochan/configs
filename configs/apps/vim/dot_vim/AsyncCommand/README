This is a mirror of http://www.vim.org/scripts/script.php?script_id=3431

AsyncCommand allows you to execute shell commands without waiting for them 
to complete. When the application terminates, its output can be loaded into 
a vim buffer. AsyncCommand is written to be compatible with Windows and 
Linux (tested on Win7 and Ubuntu 11.04). 

Currently three types of commands are supported: 

AsyncShell
    run any program and load results in a split 
AsyncGrep
    grep for files and load results in quickfix 
AsyncMake
    run make and load results in quickfix
AsyncCscopeFindSymbol, AsyncCscopeFindCalls, AsyncCscopeFindX 
    cscope commands

You can define your own commands commands by following the same format:
Define a launch function that passes the external command and result handler
(like asynchandler#quickfix) to asynccommand#run. You can use the handlers in
autoload/asynchandler.vim or define your own.

Example: 

    function! AsyncHello(query)
        " echo hello and the parameter
        let hello_cmd = "echo hello ".a:query
        " just load the file when we're done
        let vim_func = asynchandler#split()
    
        " call our core function to run in the background and then load the
        " output file on completion
        call asynccommand#run(hello_cmd, vim_func)
    endfunction

Note that cscope functions require these variables:
  let g:cscope_database = **full path to cscope database file**
  let g:cscope_relative_path = **folder containing cscope database file**
These variables can be set by tagfilehelpers.vim -- https://github.com/pydave/daveconfig/blob/master/multi/vim/.vim/plugin/tagfilehelpers.vim


Please report bugs to https://github.com/pydave/AsyncCommand/issues
